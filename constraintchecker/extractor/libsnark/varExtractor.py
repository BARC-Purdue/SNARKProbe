import os
import subprocess
import zlib

import extractor.libsnark.extractorConfig as config

from config import *

class VarExtractor(object):
    def __init__(self, source, line):
        """VarExtractor, str, int -> None"""
        self.abspath = os.path.dirname(os.path.abspath(__file__))

        self.source = source
        self.line = line
        self.gdbfile_cs = config.GETR1CS_GDB
        self.gdbfile_aux = config.GETPRIAUX_GDB
        self.gdbfile_pub = config.GETPUBLIC_GDB
        self.outfile_cs = config.CONSTRAINT_LOG
        self.outfile_aux = config.PRIAUXVAR_LOG
        self.outfile_pub = config.PUBLICVAR_LOG
        
        self.clear()

    def clear(self):
        """Remove file generated by this class
        
        VarExtractor -> None"""
        cprint.info("Remove old GDB and LOG files for variables extraction", 2)

        if (os.path.exists(self.gdbfile_cs)):
            os.remove(self.gdbfile_cs)
        if (os.path.exists(self.gdbfile_aux)):
            os.remove(self.gdbfile_aux)
        if (os.path.exists(self.gdbfile_pub)):
            os.remove(self.gdbfile_pub)

        if (os.path.exists(self.outfile_cs)):
            os.remove(self.outfile_cs)
        if (os.path.exists(self.outfile_aux)):
            os.remove(self.outfile_aux)
        if (os.path.exists(self.outfile_pub)):
            os.remove(self.outfile_pub)

    def gdbscript(self):
        """Generate GDB script based on the source file path and line number
        
        VarExtractor -> None"""
        # Generate GDB script for extracting r1cs constraint
        cprint.info("Generate GDB script to extract R1CS constraint", 3)

        compress = b"x\x9c\xb5\x941k\xc30\x10\x85g\xdf\xaf\xd0\xe0!\xa1 \xda\xbd\x1dS\x08\x84vi\xa7\x10\x82,\x9f\xddsm\xc9\x95\xe4&\xe9\xaf\xef\xd9\xc5)\x81@\\\x91.\x07zz\xba'}\xa0\xf3\x18Dm\xcb\x92L)\x1c\xe6\xe4P\x07a\rx\xd6[\xc5\xb2\nd\x8d\xb0E1H\xa3\xd5~\xa2\xdb9\n8z\xc7\x8d\x82j\x14\xcf\xaf/\x8f\xcb\xd5\x02 s\xa8\xde\xc5j\xf9\xb4\x00\xd7\x198m\xc1\xebVhk|p\x8aL\xd8\xfa\x83\x0f\xd8\xc8\xd6Q\xa3\xdcaK\xa6\xedX\xa4/<kS\xdd\x9ej\x9a`\xfcU\xbc\xecM\xb3\xf9\xcf=R\x12\x0f\xe2\x16vo\xfd\x8dg\xbc\xba\x9ftx\x0e\xc9\x85\x94uJ\x1b\xa9d@\xd7\x1c\x13\x93!\xb1\x1a\x12\x931\xb2\xba\x14y\xa6\x13\xb7\xfaK\xfe:\xad6\x92L\x8e\xfb\x88s\xdabQ\xc8\xc6\xb2\xdba\xebd\xae\x82\xe26\xc7\xa7p\xb9\x11w\x90\xa0\xc9!\x99\x86%\xbb\x1a\x96,\nK\x16\x89%\xfb_,\xfajXt\x14\x16\x1d\x89E\xc7c9~A.\xbd\xde\xcb\xa7\xf3\x81G\x0ep` \xd3!|t\x14\xe0\x1b\xed\x02\xa0P"
        script = zlib.decompress(compress).decode("utf-8")
        script = script.replace("LINE", str(self.line))
        script = script.replace("OUTFILE", self.outfile_cs)

        while ("set logging on" in script):
            script = script.replace("set logging on", "set logging enable on")
        while ("set logging off" in script):
            script = script.replace("set logging off", "set logging enable off")

        f = open(self.gdbfile_cs, "w")
        f.write(script)
        f.close()
        
        # Generate GDB script for extracting public variables value
        cprint.info("Generate GDB script to extract public variable(s) value", 3)

        compress = b'x\x9cmO\xb1\n\xc2@\x0c\xdd\xf3\x15\x19\x1cZ\x84\xa2\xbb\x8e\n\x82\xe8\xa2\x93\x88\x9cmZ\x835w\xa6w\x8a~\xbd\xa7\xb4\x05\xc5\x0c!\xef\xe5\xe5%i\xc8cm\xab\x8a\xa5B\xa5\x82\x95r\x8fV\xa0\x89\xbc3\x916\x9e\xad\xa0-\xcb\x0f\xd5I\xed\x8d\xf4\xae\xec\xa9\xd3v\x8d\x92k\xc2\xf5v3_,g\x00G%s\xc6\xe5b5\x03\r\x02\xdf\x16-\x1e0Nq\x04\xf7\xd3{2\x89h\x82\xee\x989\xe5\x8b\xd1\xc7\x81\xc5\x05\x9f\xa4Y\xc3OJ\xd2\x14\xb0\r\xf7G\xb4\x1b\xf0>\xbbX\xf1\x07%\xa7Ya\xbc\xe9\xf5}\xd1\xaf\x8ci\x88c )~\xee\x8a\xafB\x1e]X\x02\xc15\xb0\x7f\x01\x9b\xb4\\\x98'
        script = zlib.decompress(compress).decode("utf-8")
        script = script.replace("LINE", str(self.line))
        script = script.replace("OUTFILE", self.outfile_pub)

        while ("set logging on" in script):
            script = script.replace("set logging on", "set logging enable on")
        while ("set logging off" in script):
            script = script.replace("set logging off", "set logging enable off")

        f = open(self.gdbfile_pub, "w")
        f.write(script)
        f.close()
        
        # Generate GDB script for extracting private auxiliary value
        cprint.info("Generate GDB script to extract auxiliary variable(s) value", 3)
        
        compress = b"x\x9cmO\xb1\n\xc2@\x0c\xdd\xf3\x15\x19\x1cZ\x84\xa2\xbb\x8e\n\x05\xd1E'\x91r\xb5i\r\xd6\xbb3\xbd\xb3\xea\xd7{J[P\xcc\x10\x92\x97\xf7^\x92\x86\x1c\xd6\xa6\xaaXW(T\xb0\xd0\xd1\xa1\xd1\xd0\x04\xdc\xaa\x00+\xc7F\xa3)\xcb\x0f\xd4S\xcd\x8d\xa4\x15v\xd4s\xfbA\xc95\xe1f\xb7]\xa6\xab\x05@.\xa4\xce\xb8J\xd7\x0b\x10\xaf\xe1\xdb\xa2\xebG\x8cs\x9c@{z+\xa3\xd0\xcd\xd0\xe6\x89\xf2w\xaeY\xc9#cm\xbd\x8b\xe2\xa4\xe1'Eq\x0c\xd8\x85\xfdK\xdb\x8f\xf8\x90\\\x8cv\x99\x90\x95\xa4PN\r\x8a\xa1\x18\xd6\x864\xc6)\x90.~n\x0b\xef\xc21\xb8\xb0\xf6\x04W\xcf\xee\x05J\x1c^@"
        script = zlib.decompress(compress).decode("utf-8")
        script = script.replace("LINE", str(self.line))
        script = script.replace("OUTFILE", self.outfile_aux)

        while ("set logging on" in script):
            script = script.replace("set logging on", "set logging enable on")
        while ("set logging off" in script):
            script = script.replace("set logging off", "set logging enable off")

        f = open(self.gdbfile_aux, "w")
        f.write(script)
        f.close()
        
    def runscript(self):
        """Run the GDB script
        
        VarExtractor -> int"""
        # Execute GDB script to extract r1cs constraint
        cprint.info("Execute GDB script to extract R1CS constraint", 3)
        exit = subprocess.run(["gdb", "-batch", "-x", self.gdbfile_cs, self.source], stdout = open(os.devnull, 'wb'))

        # Execute GDB script to extract public variables value
        cprint.info("Execute GDB script to extract public variable(s) value", 3)
        exit = subprocess.run(["gdb", "-batch", "-x", self.gdbfile_pub, self.source], stdout = open(os.devnull, 'wb'))

        # Execute GDB script to extract private auxiliary value
        cprint.info("Execute GDB script to extract auxiliary variable(s) value", 3)
        exit = subprocess.run(["gdb", "-batch", "-x", self.gdbfile_aux, self.source], stdout = open(os.devnull, 'wb'))
    
        return exit

    def formatlog(self):
        """Reformat the GDB logging (remove line number)
        
        VarExtractor -> None"""
        # Format constraint log
        f = open(self.outfile_cs)
        content = f.readlines()
        f.close()

        f = open(self.outfile_cs, "w")

        for i in range(len(content)):
            data = content[i].split(" = ")[-1].strip("\n")
            f.write(data)

            if (i < len(content) - 1):
                f.write("\n")

        f.close()

        # Format public variable log
        f = open(self.outfile_pub)
        content = f.readlines()
        f.close()

        f = open(self.outfile_pub, "w")

        for i in range(len(content)):
            data = content[i].split(" = ")[-1].strip("\n")
            f.write(data)

            if (i < len(content) - 1):
                f.write("\n")

        f.close()

        # Format auxiliary variable log
        f = open(self.outfile_aux)
        content = f.readlines()
        f.close()

        f = open(self.outfile_aux, "w")

        for i in range(len(content)):
            data = content[i].split(" = ")[-1].strip("\n")
            f.write(data)

            if (i < len(content) - 1):
                f.write("\n")

        f.close()